# -*- coding: utf-8 -*-
"""
Created on Wed Jul 12 17:38:52 2023

@author: 1
"""
import telebot
from telebot import types
from telebot.types import CallbackQuery, ReplyKeyboardRemove
import sqlite3
import ast
import matplotlib.pyplot as plt
from random import randint
import os
import traceback
import matplotlib
import datetime
import threading


matplotlib.use('agg')

abandoned = []
token = '6108209005:AAEmhjLXyzgw8KsaBTb0LSkaEPKpzBY6LHA'
bot = telebot.TeleBot(token)

def starting_point(message): #—Ä–æ—Å—Ç
    bot.send_message(message.chat.id,
                        '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):')   
    
    bot.register_next_step_handler(message, get_height, 'height')

def add_starting_points(message, col, next_func, prev_func):
    conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM users WHERE user_id = ?",
                   (str(message.chat.id),))
    
    res = cursor.fetchone()

    try:
        d = message.text
        d = d.replace(',', '.')
        d = d.replace(' ', '') 
        d = float(d)
        if col == 'height':
            index = 4
            txt = '(—Ä–æ—Å—Ç)'
        if col == 'weight':
            index = 2
            txt = '(–≤–µ—Å)'
        if col == 'length_bedr':
            index = 6
            txt = '(–æ–±—Ö–≤–∞—Ç –±–µ–¥—Ä–∞)'
        
        if col == 'length_tal':
            index = 3
            txt = '(–æ–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏)'
        
        if col == 'length_stom':
            index = 5
            txt = '(–æ–±—Ö–≤–∞—Ç –∂–∏–≤–æ—Ç–∞)'

        if res == None or res[index] == None:
            data = [message.text]
            cursor.execute(f'UPDATE users SET {col} = ? WHERE user_id = ?',
                               (str(data), message.chat.id, ))
                
            conn.commit()
           
        else:
            data = ast.literal_eval(str(res[index]))
            data.append(message.text)
            cursor.execute(f'UPDATE users SET {col} = ? WHERE user_id = ?',
                               (str(data), message.chat.id, ))
            conn.commit()
        
        
        cursor.execute("SELECT * FROM administrators")
        
        resadm = cursor.fetchall()
        for i in resadm[0]:
            try:
                bot.send_message(i,
                                f'üÜï –ü–∞—Ü–∏–µ–Ω—Ç {res[1]} –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ {txt}')
            except:
                bot.send_message(i,
                                f'üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ {txt}')
            
        conn.close()
        buildmenu(message) if next_func == None else bot.register_next_step_handler(message, next_func, None)
        
        
        
    except telebot.apihelper.ApiTelegramException:
        traceback.print_exc()

    except:
        traceback.print_exc()
        bot.send_message(message.chat.id,
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 51.4')
        
        bot.register_next_step_handler(message, prev_func, col)


def get_stom(message, col):
    bot.send_message(message.chat.id,
                        '‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!')
    add_starting_points(message, 'length_stom', None, get_tal)


def get_tal(message, col):
    bot.send_message(message.chat.id,
                        '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ–±—Ö–≤–∞—Ç –∂–∏–≤–æ—Ç–∞ (–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—É–ø–∫–∞, –≤ —Å–º):')
    add_starting_points(message, 'length_tal', get_stom, get_tal)


def get_bedr(message, col):
    bot.send_message(message.chat.id,
                        '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ (—Å–∞–º–∞—è —Ç–æ–Ω–∫–∞—è —á–∞—Å—Ç—å, –≤ —Å–º):')
    add_starting_points(message, 'length_bedr', get_tal, get_weight)


def get_weight(message, col):
    bot.send_message(message.chat.id,
                        '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ–±—Ö–≤–∞—Ç –±–µ–¥—Ä–∞ (–≤ —Å–º):')
    add_starting_points(message, 'weight', get_bedr, get_height)

def get_height(message, col):
    add_starting_points(message, 'height', get_weight, None)
    bot.send_message(message.chat.id,
                        '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥):')


def add_table_values(message):
    name = message.text
    user_id = message.chat.id
    endtime = datetime.datetime.now() + datetime.timedelta(days=30)
    delta = endtime - datetime.datetime.now()
    reminder_timer = threading.Timer(delta.total_seconds(), send_reminder, [user_id])
    reminder_timer.start()
    conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=15)
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id, ))

    res = cursor.fetchall()

    cursor.execute('INSERT INTO users (user_id, name, end_time) VALUES (?, ?, ?)', (user_id, name, endtime))
    conn.commit()

    conn.close()

    if len(res) != 0:
        buildmenu(message)
    else:

        starting_point(message)
    

def send_reminder(chat_id):
    conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM administrators")
    
    resadm = cursor.fetchall()

    cursor.execute("SELECT name FROM users WHERE user_id = ?", (chat_id,))
    name = cursor.fetchone()
    conn.close()

    markup = types.InlineKeyboardMarkup(row_width=1)
    usr = types.InlineKeyboardButton(text=f'–î–∞', callback_data=f'kill|{chat_id}')
    markup.row(usr)
    usr = types.InlineKeyboardButton(text=f'–ù–µ—Ç', callback_data=f'menu')
    markup.row(usr)
    
    for i in resadm[0]:        
        bot.send_message(i, f'–£ –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∫—É—Ä—Å –≤ 30 –¥–Ω–µ–π, —É–¥–∞–ª–∏—Ç—å –µ–≥–æ?', reply_markup=markup)


    

def get_login(message):
    conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=15)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?',
                   (message.chat.id,))
    res = cursor.fetchall()
    conn.close()
    if len(res):
        buildmenu(message)
    else:
        bot.send_message(message.chat.id,
                        '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:')
        bot.register_next_step_handler(message, add_table_values)
    

def build_admin_menu(message):
    conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
    cursor = conn.cursor()
    
    
    
    cursor.execute("SELECT * FROM users")
    
    users = cursor.fetchall()
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    usr = types.InlineKeyboardButton(text=f'–û–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', callback_data=f'rassilka')
    markup.row(usr)
    usr = types.InlineKeyboardButton(text=f'–£–¥–∞–ª–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞', callback_data=f'ban_hammer')
    markup.row(usr)
    for u in users:
        usr = types.InlineKeyboardButton(text=f'{u[1]}', callback_data=f'check|{u[0]}')
        markup.row(usr)
        
    
    try:
        bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', message.chat.id, message.message_id,
                         reply_markup=markup)
    except:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:',
                         reply_markup=markup)
        

    
    conn.close()


@bot.message_handler(commands=['start'])
def start_message(message):
    conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
    cursor = conn.cursor()
    
    
    
    cursor.execute("SELECT id FROM administrators WHERE id = ?", (message.chat.id,))
    
    name = cursor.fetchone()
    
    conn.close()
    if name != None:
        build_admin_menu(message)
    else:
        msg = bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ... (–æ–ø–∏—Å–∞–Ω–∏–µ)')
        get_login(msg)
    
    

def buildmenu(message):

    conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM administrators")
    
    resadm = cursor.fetchall()
    
    conn.close() 

    flg = False
    for user in resadm:
        if str(user[0]) == str(message.chat.id):
            flg = True
            break

    if not flg:

        markup = types.InlineKeyboardMarkup(row_width=1)
        stats = types.InlineKeyboardButton(text='üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data='show_stats')
        markup.row(stats)
        data = types.InlineKeyboardButton(text='‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='add_stats')
        markup.row(data)
        tips = types.InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='delete_stats')
        markup.row(tips)
        tips = types.InlineKeyboardButton(text='üìù –ù–∞–ø–∏—Å–∞—Ç—å –¥–æ–∫—Ç–æ—Ä—É', callback_data='tip')
        markup.row(tips)
        
        conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
        cursor = conn.cursor()
        
        cursor.execute("SELECT name FROM users WHERE user_id = ?",
                    (str(message.chat.id),))
        
        res = cursor.fetchone()
        conn.close()

        try:
            bot.edit_message_text(f'üèõ –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å, {res[0]}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', message.chat.id, message.message_id, protect_content=True, 
                            reply_markup=markup)
        except:
            bot.send_message(message.chat.id, f'üèõ –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å, {res[0]}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', protect_content=True,
                            reply_markup=markup)
        
    else:
        build_admin_menu(message)


def build_stats_menu(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    data = types.InlineKeyboardButton(text='üç¨ –í–µ—Å', callback_data=f'get|weight')
    markup.row(data)

    stats = types.InlineKeyboardButton(text='üç¨ –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å –±–µ–¥–µ—Ä', callback_data=f'get|length_bedr')
    markup.row(stats)

    stats = types.InlineKeyboardButton(text='üç¨ –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å —Ç–∞–ª–∏–∏ (—Å–∞–º–∞—è —Ç–æ–Ω–∫–∞—è —á–∞—Å—Ç—å)', callback_data=f'get|length_tal')
    markup.row(stats)
    
    stats = types.InlineKeyboardButton(text='üç¨ –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å –∂–∏–≤–æ—Ç–∞ (–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—É–ø–∫–∞)', callback_data=f'get|length_stom')
    markup.row(stats)

    stats = types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='menu')
    markup.row(stats)
    
    try:
        bot.edit_message_text('üèõ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', message.chat.id, message.message_id,
                             reply_markup=markup)
    except:
        bot.send_message(message.chat.id, 'üèõ –í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:',
                            reply_markup=markup)



def build_stats_menu_for_user(message, user_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    data = types.InlineKeyboardButton(text='üç¨ –í–µ—Å', callback_data=f'data|weight|{user_id}')
    markup.row(data)

    stats = types.InlineKeyboardButton(text='üç¨ –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å –±–µ–¥–µ—Ä', callback_data=f'data|length_bedr|{user_id}')
    markup.row(stats)

    stats = types.InlineKeyboardButton(text='üç¨ –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å —Ç–∞–ª–∏–∏ (—Å–∞–º–∞—è —Ç–æ–Ω–∫–∞—è —á–∞—Å—Ç—å)', callback_data=f'data|length_tal|{user_id}')
    markup.row(stats)
    
    stats = types.InlineKeyboardButton(text='üç¨ –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å –∂–∏–≤–æ—Ç–∞ (–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—É–ø–∫–∞)', callback_data=f'data|length_stom|{user_id}')
    markup.row(stats)

    
    
    stats = types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='menu')
    markup.row(stats)
    
    try:
        bot.edit_message_text('üèõ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', message.chat.id, message.message_id,
                             reply_markup=markup)
    except:
        bot.send_message(message.chat.id, 'üèõ –í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:',
                            reply_markup=markup)


def build_sending_options_to_delete(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    data = types.InlineKeyboardButton(text='üç¨ –í–µ—Å', callback_data=f'del1|weight')
    markup.row(data)

    stats = types.InlineKeyboardButton(text='üç¨ –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å –±–µ–¥–µ—Ä', callback_data=f'del1|length_bedr')
    markup.row(stats)

    stats = types.InlineKeyboardButton(text='üç¨ –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å —Ç–∞–ª–∏–∏ (—Å–∞–º–∞—è —Ç–æ–Ω–∫–∞—è —á–∞—Å—Ç—å)', callback_data=f'del1|length_tal')
    markup.row(stats)
    
    stats = types.InlineKeyboardButton(text='üç¨ –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å –∂–∏–≤–æ—Ç–∞ (–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—É–ø–∫–∞)', callback_data=f'del1|length_stom')
    markup.row(stats)

    
    
    stats = types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='menu')
    markup.row(stats)
    
    try:
        bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', message.chat.id, message.message_id,
                         reply_markup=markup)
    except:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
                         reply_markup=markup)
        

def build_sending_options(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    data = types.InlineKeyboardButton(text='üç¨ –í–µ—Å', callback_data=f'add|weight')
    markup.row(data)

    stats = types.InlineKeyboardButton(text='üç¨ –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å –±–µ–¥–µ—Ä', callback_data=f'add|length_bedr')
    markup.row(stats)

    stats = types.InlineKeyboardButton(text='üç¨ –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å —Ç–∞–ª–∏–∏ (—Å–∞–º–∞—è —Ç–æ–Ω–∫–∞—è —á–∞—Å—Ç—å)', callback_data=f'add|length_tal')
    markup.row(stats)
    
    stats = types.InlineKeyboardButton(text='üç¨ –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å –∂–∏–≤–æ—Ç–∞ (–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—É–ø–∫–∞)', callback_data=f'add|length_stom')
    markup.row(stats)

    
    
    stats = types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='menu')
    markup.row(stats)
    
    try:
        bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', message.chat.id, message.message_id,
                         reply_markup=markup)
    except:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:',
                         reply_markup=markup)


def add_table_data(message, col):
    conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM users WHERE user_id = ?",
                   (str(message.chat.id),))
    
    res = cursor.fetchone()

    try:    
        d = message.text
        d = d.replace(',', '.')
        d = d.replace(' ', '') 
        d = float(d)
        if col == 'weight':
            index = 2
            txt = '(–≤–µ—Å)'
        if col == 'length_bedr':
            index = 6
            txt = '(–æ–±—Ö–≤–∞—Ç –±–µ–¥—Ä–∞)'
        
        if col == 'length_tal':
            index = 3
            txt = '(–æ–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏)'
        
        if col == 'length_stom':
            index = 5
            txt = '(–æ–±—Ö–≤–∞—Ç –∂–∏–≤–æ—Ç–∞)'

        if res[index] == None:
            data = [message.text]
            cursor.execute(f'UPDATE users SET {col} = ? WHERE user_id = ?',
                               (str(data), message.chat.id, ))
                
            conn.commit()
           
        else:
            data = ast.literal_eval(str(res[index]))
            data.append(message.text)
            cursor.execute(f'UPDATE users SET {col} = ? WHERE user_id = ?',
                               (str(data), message.chat.id, ))
            conn.commit()
        
        
        cursor.execute("SELECT * FROM administrators")
        
        resadm = cursor.fetchall()
        for i in resadm[0]:
            bot.send_message(i,
                            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ')
        conn.close()
        
        buildmenu(message)
    except:
        traceback.print_exc()
        bot.send_message(message.chat.id,
                        'üõë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 51.4')
        
        bot.register_next_step_handler(message, add_table_data, col)


def apply_data(message, col):
    x = '–∫–≥' if col == 'weight' else '—Å–º'
    bot.send_message(message.chat.id,
                    f'‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (–≤ {x}):')
    bot.register_next_step_handler(message, add_table_data, col)


def dellcur(message, col, ind=[]):
    conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
    cursor = conn.cursor()
    cursor.execute(f'SELECT {col}  FROM users WHERE user_id = ?', (message.chat.id,))
    
    res = cursor.fetchone()
    
    
    
    data = ast.literal_eval(str(res[0]))
    markup = types.InlineKeyboardMarkup(row_width=1)
    if data != None:
        for i in range(len(data)):
            text = data[i] if i not in ind else f'{data[i]} ‚ùå '
            stats = types.InlineKeyboardButton(text=text, callback_data=f'derlind|{i}|{ind}|{col}')
            markup.row(stats)
        
        stats = types.InlineKeyboardButton(text='–ü—Ä–∏–º–µ–Ω–∏—Ç—å', callback_data=f'apld|{ind}|{col}')
        markup.row(stats)
        
        stats = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='menu')
        markup.row(stats)
        
        try:
            bot.edit_message_text('–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å):', message.chat.id, message.message_id,
                             reply_markup=markup)
        except:
            bot.send_message(message.chat.id, '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å):',
                             reply_markup=markup)
    else:
        markup = types.InlineKeyboardMarkup(row_width=1)
        stats = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='menu')
        markup.row(stats)
        bot.send_message(message.chat.id, '–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π',
                         reply_markup=markup)
    conn.close()


def send_to_doctor(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:')
    bot.register_next_step_handler(message, send_doctor)


def send_doctor(message):
    conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM administrators")
    
    resadm = cursor.fetchall()
    
    cursor.execute("SELECT name FROM users WHERE user_id = ?", (message.chat.id,))
    name = cursor.fetchone()
    conn.close()
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    stats = types.InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'rep|{message.chat.id}')
    markup.row(stats)
    
    for i in resadm[0]:
        
        bot.send_message(i,
                        f'üì∞ –ü–∞—Ü–∏–µ–Ω—Ç {name[0]} –Ω–∞–ø–∏—Å–∞–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ: \n{message.text}',
                        reply_markup=markup)

    buildmenu(message)


def reply_to_user(message, rep_id):
    bot.send_message(rep_id, f'üì∞ –û—Ç–≤–µ—Ç –¥–æ–∫—Ç–æ—Ä–∞: \n{message.text}')

def take_cur(message, ind=[]):
    conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
    cursor = conn.cursor()
    cursor.execute(f'SELECT *  FROM users')
    
    res = cursor.fetchall()
    
    
    
    data = res
    markup = types.InlineKeyboardMarkup(row_width=1)
    if data != None:
        
        for i in range(len(data)):
            text = data[i][1] if str(data[i][-1]) not in ind else f'‚ùå {data[i][1]}'
            text = text.replace('\n', ' ')
            stats = types.InlineKeyboardButton(text=text, callback_data=f'passed|{ind}|{data[i][-1]}')
            markup.row(stats)
        
        stats = types.InlineKeyboardButton(text='–ü—Ä–∏–º–µ–Ω–∏—Ç—å', callback_data=f'applied|{ind}')
        markup.row(stats)
        
        stats = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='menu')
        markup.row(stats)
        
        try:
            bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', message.chat.id, message.message_id,
                             reply_markup=markup)
        except:
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
                             reply_markup=markup)
    else:
        markup = types.InlineKeyboardMarkup(row_width=1)
        stats = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='menu')
        markup.row(stats)
        bot.send_message(message.chat.id, '–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –Ω–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤',
                         reply_markup=markup)
    conn.close()


def get_text_to_send(message, users, texting='', img_paths=[]):
    texting = message.text if texting == '' else texting
    markup = types.InlineKeyboardMarkup(row_width=1)
    stats = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='menu')
    markup.row(stats)
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "+", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                         reply_markup=markup)
        
    bot.register_next_step_handler(message, get_image_to_send, users, texting, img_paths)

def get_image_to_send(message, users, texting, img_paths):
    print(img_paths)
    markup = types.InlineKeyboardMarkup(row_width=1)
    stats = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='menu')
    markup.row(stats)
    try:
        users = ast.literal_eval(users)
    except:
        pass


    conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
    cursor = conn.cursor()
    
    if message.text == '+':
        images = []
        img_paths = img_paths[::-1]
        for path in range(len(img_paths)):
            if img_paths[path] not in abandoned:
                images.append(telebot.types.InputMediaPhoto(open(f'{img_paths[path]}', 'rb'), 
                                                                                caption='üì® –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –¥–æ–∫—Ç–æ—Ä–∞: \n' + texting if path == 0 else ''))
                abandoned.append(img_paths[path])
            else:
                pass
        for id in users:
            cursor.execute(f'SELECT user_id FROM users WHERE id = ?', (id, ))       
            snd = cursor.fetchone()
            try:
                
                bot.send_media_group(snd[0], images, protect_content=True)
            
            except:
                traceback.print_exc()
                
                bot.send_message(snd[0], text='üì® –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –¥–æ–∫—Ç–æ—Ä–∞: \n' + texting)
        try:
            for i in img_paths:
                os.remove(i)
        except:
            traceback.print_exc()
        
        build_admin_menu(message) 
        
    else:
        photo = message.photo[-1]
        file_info = bot.get_file(photo.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        fm = f'{randint(1, 100000)}.jpg'
        save_path = f'{fm}'
        img_paths.append(save_path)
        with open(save_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "+", —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å',
                         reply_markup=markup)
        
        bot.register_next_step_handler(message, get_image_to_send, users, texting, img_paths)
    
    conn.close()


def users_to_delete(message):
    conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
    cursor = conn.cursor()
    cursor.execute(f'SELECT *  FROM users')
    
    res = cursor.fetchall()
    
    conn.close()
    
    data = res
    markup = types.InlineKeyboardMarkup(row_width=1)
    if data != None:
        
        for i in range(len(data)):
            stats = types.InlineKeyboardButton(text=text, callback_data=f'kill|{data[i][-1]}')
            markup.row(stats)
        
    
        
        stats = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='menu')
        markup.row(stats)
        
        try:
            bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', message.chat.id, message.message_id,
                             reply_markup=markup)
        except:
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
                             reply_markup=markup)
    else:
        markup = types.InlineKeyboardMarkup(row_width=1)
        stats = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='menu')
        markup.row(stats)
        bot.send_message(message.chat.id, '–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –Ω–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤',
                         reply_markup=markup)
    conn.close()


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.data == 'ban_hammer':
        users_to_delete(call.message)

    if 'kill|' in call.data:
        conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
        cursor = conn.cursor()
        cursor.execute(f'DELETE FROM users WHERE user=?', (call.data.split('|')[1],))
        conn.close()
        build_admin_menu(call.message)

    if 'applied|' in call.data:
        users_to_send = call.data.split('|')[1]
        markup = types.InlineKeyboardMarkup(row_width=1)
        stats = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='menu')
        markup.row(stats)
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:',
                         reply_markup=markup)
        
        bot.register_next_step_handler(call.message, get_text_to_send, users_to_send)
        

    if 'data|' in call.data:
        user_id = call.data.split('|')[2]
        stat = call.data.split('|')[1]

        conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
        cursor = conn.cursor()
                    
                    
        cursor.execute(f'SELECT name  FROM users WHERE user_id = ?', (user_id, ))       
        name = cursor.fetchone()
        conn.close()
        
        try:
            text = f'‚úÖ C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name[0]} '
            if stat == "length_bedr":
                text += '–ø–æ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –±—ë–¥–µ—Ä'

            if stat == "length_tal":
                text += '–ø–æ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ —Ç–∞–ª–∏–∏'

            if stat == "length_stom":
                text += '–ø–æ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∂–∏–≤–æ—Ç–∞'

            if stat == "weight":
                text += '–ø–æ –≤–µ—Å—É'

            label = '–∫–≥' if stat == "weight" else '—Å–º'
            

            options = types.InlineKeyboardMarkup(row_width=1)
            back = types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='menu')
            options.row(back)
            
            index = call.data.split("|")[1]
            
            conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
            cursor = conn.cursor()
                    
                    
            cursor.execute(f'SELECT {index}  FROM users WHERE user_id = ?', (user_id, ))
                    
            res = cursor.fetchone()
            

            cursor.execute(f'SELECT height  FROM users WHERE user_id = ?', (user_id, ))
                    
            height = cursor.fetchone()
            height = ast.literal_eval(str(res[0]))

            
            res = ast.literal_eval(str(res[0]))
            res = [float(i) for i in res]
            x = [i for i in range(1, len(res) + 1)]

            index = x
            values = res
            
            cursor.execute(f'SELECT height  FROM users WHERE user_id = ?', (user_id, ))
                    
            
            wght = int(res[-1])

            imt = round(wght / (int(height[0]) / 100), 2)
            text += f', –ò–ú–¢ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {imt}'
            plt.clf()
                    
            plt.bar(index,values)
                    
            ax = plt.gca()
            plt.bar_label(ax.containers[0])
                    
            plt.xlabel("–ü–æ—Ä—è–¥–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π")
            plt.ylabel(label)

            flname = str(randint(100000, 1000000))
                    
            plt.savefig(f'{flname}.png')
                    

                    
            if x != None and len(x) != 0:
                bot.send_photo(call.message.chat.id, open(f'{flname}.png', 'rb'),
                                caption=f'{text}', reply_markup=options)
            else:   
                try:
                    bot.edit_message_text('–ö–∞–∂–µ—Ç—Å—è, —É –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π', call.message.chat.id, call.message.message_id,
                                            reply_markup=options)
                    os.remove(f'{flname}.png')

                except:
                    bot.send_message(call.message.chat.id, '–ö–∞–∂–µ—Ç—Å—è, —É –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π',
                                            reply_markup=options)
                      
                    os.remove(f'{flname}.png')
            
            conn.close()
            
        except:
            traceback.print_exc()
            try:
                bot.edit_message_text('–ö–∞–∂–µ—Ç—Å—è, —É –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π', call.message.chat.id, call.message.message_id,
                                     reply_markup=options)
            except:
                bot.send_message(call.message.chat.id, '–ö–∞–∂–µ—Ç—Å—è, —É –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π',
                                     reply_markup=options)
    

    if call.data == 'rassilka':
        take_cur(call.message)

    if 'passed|' in call.data:
        res = call.data.split("|")
        ind = ast.literal_eval(str(res[1]))
        i = str(res[2])
        if i not in ind:
            ind.append(i)
        else:
            del ind[ind.index(i)]
        take_cur(call.message, ind)

    if 'check' in call.data:
        user_id = call.data.split('|')[1]
        build_stats_menu_for_user(call.message, int(user_id))
        
    if 'rep|' in call.data:
        rep_id = call.data.split('|')[1]
        bot.send_message(call.message.chat.id, '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:')
        bot.register_next_step_handler(call.message, reply_to_user, rep_id)

    if call.data == 'tip':
        send_to_doctor(call.message)

    if 'del1' in call.data:
        col = call.data.split('|')[1]
        dellcur(call.message, col)
        
    if 'derlind' in call.data:
        res = call.data.split("|")
        col = res[3]
        ind = ast.literal_eval(str(res[2]))
        i = int(res[1])
        if i not in ind:
            ind.append(i)
        else:
            del ind[ind.index(i)]
        dellcur(call.message, col, ind)

    if call.data == "show_stats":
        build_stats_menu(call.message)
    
    if call.data == "menu":
        buildmenu(call.message)

    if call.data == 'delete_stats':
        build_sending_options_to_delete(call.message)

    if call.data == 'add_stats':
        build_sending_options(call.message)
    
    if 'apld' in call.data:
        res = call.data.split("|")
        col = res[2]
        ind = ast.literal_eval(str(res[1]))
        
        conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
        cursor = conn.cursor()
        cursor.execute(f'SELECT {col}  FROM users WHERE user_id = ?', (call.message.chat.id,))
        
        res = cursor.fetchone()
        res = ast.literal_eval(str(res[0]))
        data = []
        for i in range(len(res[0])):
            if i not in ind:
                try:
                    data.append(res[i])
                except:
                    pass
        
        cursor.execute(f'UPDATE users SET {col} = ? WHERE user_id = ?',
                           (str(data), call.message.chat.id, ))
        conn.commit()
        
        conn.close()
        
        
        buildmenu(call.message)


    
    if 'add|' in call.data:
        index = call.data.split('|')[1]
        apply_data(call.message, index)

    if 'get|' in call.data:
        try:
            text = '‚úÖ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ '
            if call.data == "get|length_bedr":
                text += '–æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –±—ë–¥–µ—Ä'

            if call.data == "get|length_tal":
                text += '–æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ —Ç–∞–ª–∏–∏'

            if call.data == "get|length_stom":
                text += '–æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∂–∏–≤–æ—Ç–∞'

            if call.data == "get|weight":
                text += '–≤–µ—Å—É'

            label = '–∫–≥' if call.data == "get|weight" else '—Å–º'
            

            options = types.InlineKeyboardMarkup(row_width=1)
            back = types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='menu')
            options.row(back)
            
            index = call.data.split("|")[1]
            
            conn = sqlite3.connect('db/docdb.db', check_same_thread=False, timeout=3)
            cursor = conn.cursor()
                    
                    
            cursor.execute(f'SELECT {index}  FROM users WHERE user_id = ?', (call.message.chat.id,))
                    
            res = cursor.fetchone()
                    
            conn.close()
            res = ast.literal_eval(str(res[0]))
            res = [float(i) for i in res]
            x = [i for i in range(1, len(res) + 1)]

            index = x
            values = res
            wght = int(res[-1])
            
            cursor.execute(f'SELECT height  FROM users WHERE user_id = ?', (call.message.chat.id, ))
                    
            
            wght = int(res[-1])

            imt = round(wght / (int(height[0]) / 100), 2)
            text += f', –ò–ú–¢ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {imt}'

            plt.clf()
                    
            plt.bar(index,values)
                    
            ax = plt.gca()
            plt.bar_label(ax.containers[0])
                    
            plt.xlabel("–ü–æ—Ä—è–¥–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π")
            plt.ylabel(label)

            flname = str(randint(100000, 1000000))
                    
            plt.savefig(f'{flname}.png')
                    

                    
            if x != None and len(x) != 0:
                bot.send_photo(call.message.chat.id, open(f'{flname}.png', 'rb'),
                                caption=f'{text}', reply_markup=options)
            else:   
                try:
                    bot.edit_message_text('–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π', call.message.chat.id, call.message.message_id,
                                            reply_markup=options)
                    os.remove(f'{flname}.png')

                except:
                    bot.send_message(call.message.chat.id, '–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π',
                                            reply_markup=options)
                      
                    os.remove(f'{flname}.png')
            
            
        except:
            try:
                bot.edit_message_text('–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π', call.message.chat.id, call.message.message_id,
                                     reply_markup=options)
            except:
                bot.send_message(call.message.chat.id, '–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π',
                                     reply_markup=options)
        
if __name__ == '__main__':
    bot.infinity_polling() 